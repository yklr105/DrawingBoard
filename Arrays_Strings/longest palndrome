/*
Time complexity is O(N)
Space complexity is worst case O(N) 
*/
class Solution {
    public int longestPalindrome(String s) {
        
        Set<Character> charSet = new HashSet<Character>();
    if(s==null || s.length()==0) return 0;
        
        for(char c:s.toCharArray())
        {
            if(charSet.contains(c))
                charSet.remove(c);
            else
                charSet.add(c);
        }
        
        if(charSet.size() <=1)
            return s.length();
        return s.length()-charSet.size()+1;
         

        
    }
}
