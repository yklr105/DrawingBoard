import java .util.Map;
import java.util.HashMap;
/*If the maximum limit of roman number is known , then the time complexity is O(1) if it is not known then O(n)
Memory : a map is being created with 13 key value pairs 
*/
class Solution {
    public static int romanToIntOne(String s) {
  
      Map <String ,Integer> romanToNumericMap = new HashMap<String,Integer>();
      romanToNumericMap.put("I",1);
      romanToNumericMap.put("V",5);
      romanToNumericMap.put("X",10);
      romanToNumericMap.put("L",50);
      romanToNumericMap.put("C",100);
      romanToNumericMap.put("D",500);
      romanToNumericMap.put("M",1000);
      romanToNumericMap.put("IV",4);
      romanToNumericMap.put("IX",9);
      romanToNumericMap.put("XL",40);
      romanToNumericMap.put("XC",90);
      romanToNumericMap.put("CD",400);
      romanToNumericMap.put("CM",900);
      
      int sumToRetrun=0;
      int i=0;
     while(i < s.length())
      {
        if((i+1) <s.length() && romanToNumericMap.containsKey(s.charAt(i)+""+s.charAt(i+1)))
        {
          sumToRetrun+=romanToNumericMap.get(s.charAt(i)+""+s.charAt(i+1));
          i+=2;
        }
        else
        {
          sumToRetrun+=romanToNumericMap.get(String.valueOf(s.charAt(i)));
          i++;
        }
      }
      
      return sumToRetrun;

    }
  public static void main (String args[])
  {
    System.out.println("The value of roman numeral is "+romanToInt("XIV"));
  }
  
}
