class Solution {
  
  /*
  Time complexity is O(n), space complexity is o(n)
  
  */
    public static int[] productExceptSelf(int[] nums) {
        int [] leftProd = new int[nums.length];
        int [] rightProd = new int[nums.length];
        int [] result = new int[nums.length];
      
      int lProd = 1;
      for(int i=0;i<leftProd.length;i++)
      {
        leftProd[i]=lProd;
        lProd*=nums[i];
        System.out.println(leftProd[i]);
      }
      
      int rProd =1;
      for(int j=rightProd.length-1;j>=0;j--)
      {
        rightProd[j]=rProd;
        rProd*=nums[j];
      }
      for(int k=0;k<nums.length;k++)
      {
        result[k]= leftProd[k]*rightProd[k];
      }
      return result;
    }
  /*
  Time complexity is O(n), space complexity is O(1) as resultant array dosent count towards space complexity
  */
      public static int[] productExceptSelfOne(int[] nums) {
       
 int [] result = new int[nums.length];
      
      result[0]=1;
      for(int i=1;i<nums.length;i++)
      {
        result[i]=result[i-1]*nums[i-1];
       
      }
      
      int rProd =1;
      for(int j=nums.length-1;j>=0;j--)
      {
        result[j]=rProd*result[j];
        rProd*=nums[j];
      }
     
      return result;
    }
  
  public static void main(String args[])
  {
    int [] result = productExceptSelf(new int[] {1,2,3,4});
  }
}
