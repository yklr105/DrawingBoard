import java.util.*;
/*
Time complexity is O(n^2)(even though Arrays.sort() will take O(NlogN) time complexity , space complexity is O(result) 


*/
class Solution {
    public static List<List<Integer>> threeSum(int[] nums) {
           
      List<List<Integer>> numList = new ArrayList<List<Integer>>();
      Arrays.sort(nums);
      for(int i=0;i<nums.length-2;i++)
      {
       if(i-1>=0 && nums[i] == nums[i-1])
         continue;
        int j=i+1,k=nums.length-1;
      
        while(j<k && j<nums.length)
        {
          if((nums[i]+nums[j]+nums[k])==0)
          {
            numList.add(Arrays.asList(nums[i],nums[j],nums[k]));
            while (j < k && nums[j] == nums[j+1]) j++;
            while (j < k && nums[j] == nums[k-1]) k--;
            j++;
            k--;
          }
          else if (nums[j]+nums[k] < (0-nums[i]))
          {
            j++;
          }
          else
          {
            k--;
          }
        }
      }
       return numList;
    }
  public static void main(String args[])
  {
    List<List<Integer>> numList = threeSum(new int[]{-1,0,1,2,-1,-4});
   
    Iterator<List<Integer>> listItr = numList.iterator();
    while(listItr.hasNext())
    {
      List<Integer> numList1 = listItr.next();
     Iterator<Integer> numItr = numList1.iterator();
      while(numItr.hasNext())
      {
        System.out.println("  "+numItr.next());
      }
    }
  }
}
