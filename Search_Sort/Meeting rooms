class Solution {
    /*Time complexity is O(nlogN) as we are sorting the meeting tstart and end times 
    Space complexity is O(N) to store the start and end times
    */
    public int minMeetingRooms(int[][] intervals) {
             if(intervals.length ==0)
      return 0;
     if(intervals.length ==0)
      return 0;
     
     int numOfMeetingRooms =0;
     int [] start = new int[intervals.length];
     int [] end = new int[intervals.length];
     
     for(int i=0;i<intervals.length;i++)
     {
        start[i] = intervals[i][0];
        end[i] = intervals[i][1];
     }
     Arrays.sort(start);
     Arrays.sort(end);
     
     int endIndex=0;
     for(int i=0;i<start.length;i++)
     {
       if(start[i] < end[endIndex])
       {
         numOfMeetingRooms++;
       }
       else
       {
       endIndex++;
       }
     }
     return numOfMeetingRooms;
    }
}
