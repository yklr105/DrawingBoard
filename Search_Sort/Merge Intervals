class Solution {
    /*Time complexity is O(nlogN)*/
  private class ArrayComparator implements Comparator<int []>{
    @Override
     public int compare(int []a,int []b)
     {
     return a[0] < b[0] ? -1 : a[0] == b[0] ? 0 : 1;
     }
  }
  
    public int[][] merge(int[][] intervals) {
               
       if(intervals == null || intervals.length == 0)
         return intervals;
      
      Collections.sort(Arrays.asList(intervals),new ArrayComparator());
      
      List<int []> mergedList = new ArrayList<int []>();
      mergedList.add(intervals[0]);
      int mergeIndex=0;
     
      for(int i=1;i<intervals.length;i++)
        {
          if(mergedList.get(mergeIndex)[intervals[i].length-1]>=intervals[i][0])
          {
            mergedList.get(mergeIndex)[intervals[i].length-1] = Math.max(mergedList.get(mergeIndex)[intervals[i].length-1],intervals[i][intervals[i].length-1]);
          }
        else
        {
          mergeIndex++;
          mergedList.add(intervals[i]);
        }

        }
       return mergedList.toArray(new int[mergedList.size()][]);
    }
}
