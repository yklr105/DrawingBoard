import java.util.*;
class Solution {
  /*Time complexity is O(n+m)
  Space complexity is O(min(n,m))
  */
    public int[] intersect1(int[] nums1, int[] nums2) {
        
      if(nums1.length > nums2.length)
        return intersect(nums2,nums1);
      
      Map<Integer,Integer> nums1Map = new HashMap<Integer,Integer>();
      
      for(Integer n:nums1)
      {
        int count = nums1Map.getOrDefault(n,0);
        nums1Map.put(n,count+1);
      }
      int index =0;
      for(Integer n:nums2)
      {
        int numCount = nums1Map.getOrDefault(n,0);
        if(numCount > 0)
        {
          nums1[index++]=n;
          nums1Map.put(n,numCount-1);
        }
      }
      return Arrays.copyOf(nums1,index);
    }
  /*
  Time complexity is O(nLogn+mLogm) for sorting
  Space complexity is O(1)
  
  */
    public int[] intersect(int[] nums1, int[] nums2) {
      if(nums1.length > nums2.length)
        return intersect(nums2,nums1);
     Arrays.sort(nums1);
     Arrays.sort(nums2);
     
     int resultIndex =0,nums1Ind=0,nums2Ind=0 ;
     
     while(nums1Ind < nums1.length && nums2Ind < nums2.length)
     {
       if(nums1[nums1Ind]==nums2[nums2Ind])
       {
         nums2[resultIndex++]=nums1[nums1Ind];
         nums1Ind++;
         nums2Ind++;
       }
       else if(nums1[nums1Ind] < nums2[nums2Ind])
       {
         nums1Ind++;
       }
       else
       {
         nums2Ind++;
       }
       
     }
     return Arrays.copyOf(nums2,resultIndex);
    }
  public  static void main(String args[])
  {
    Solution sol = new Solution();
    int [] num1 = {1,2,2,1};
    int [] num2 = {2,2} ;
    int [] result = sol.intersect(num1,num2);
    for(int i=0;i<result.length;i++)
      System.out.println(result[i]);
    
    }
}
