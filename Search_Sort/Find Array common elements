class Solution {
    /*Space complexity is O(m+n)
    Time complexity is O(m+n)
    */
    public int[] intersection(int[] nums1, int[] nums2) {
        Set<Integer> num1Set = new HashSet<Integer>();
      for(int n:nums1)
        num1Set.add(n);
      
      Set<Integer> num2Set = new HashSet<Integer>();
      for(int n:nums2)
        num2Set.add(n);
        
      
     if(num1Set.size() < num2Set.size())
       return setCompare(num1Set,num2Set);
      else
        return setCompare(num2Set,num1Set);
        
    }
      private int[] setCompare(Set<Integer> smallSet,Set<Integer> largeSet)
  {
    int [] numList = new int[smallSet.size()];
    int numIndex = 0;
    for(Integer num:smallSet)
    {
      if(largeSet.contains(num))
        numList[numIndex++]=num;
    }
       return Arrays.copyOf(numList,numIndex);
    
       
  }
}
