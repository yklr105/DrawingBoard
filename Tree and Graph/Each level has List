/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 Time complexity is O(N)
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
         List<List<Integer>> returnList = new ArrayList<List<Integer>>();
    if(root == null)
        return returnList;
      
     
      TreeNode currNode = root;
      Deque<TreeNode> currQueue = new ArrayDeque<TreeNode>();
      currQueue.add(currNode);
      while(!currQueue.isEmpty())
      {
        List<Integer> levelList = new ArrayList<Integer>();
        Deque<TreeNode> childQueue= new ArrayDeque<TreeNode>();
        while(!currQueue.isEmpty())
        {
          TreeNode node = currQueue.remove();
          levelList.add(node.val);
          if(node!=null)
          {
              if(node.left!=null)
            childQueue.add(node.left);
              
               if(node.right!=null)
            childQueue.add(node.right);
              
          }
        }
        returnList.add(levelList);
        currQueue=childQueue;
      }
      return returnList;
    }
}
