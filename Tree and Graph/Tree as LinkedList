/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
    /*Time complexity is O(N)
    Space complexity is O(N)
    */
    private TreeNode flattenTreeNode(TreeNode node)
    {
        if(node == null)
        {
            return null;
        }
        
        if(node.left == null && node.right == null)
        {
          return node;
        }
        
        TreeNode leftTail = this.flattenTreeNode(node.left);
        
        TreeNode rightTail = this.flattenTreeNode(node.right);
        
        if(leftTail != null)
        {
            leftTail.right = node.right;
            node.right = node.left;
            node.left=null;
        }
        return rightTail == null? leftTail:rightTail;
    }
    
    /*Time complexity is O(n), even though some of the nodes are visited at most 2 times
    Space complexity is O(1)
    */
    public void flatten(TreeNode root) {
       // this.flattenTreeNode(root);
        TreeNode curr = root;
        while(curr!=null)
        {
           if(curr.left != null)
           {
               TreeNode prev = curr.left;
               while(prev.right != null)
                   prev = prev.right;
               
               prev.right = curr.right;
               curr.right = curr.left;
               curr.left = null;   
           }
            curr=curr.right;
        }
        
    }
}
