class Solution {
    /*Time complexity is O(m*n)
    Space complexity is for call stack is O(M*n) in case all the nodes are 1
    */
    public static int numIslands1(char[][] grid) {
    if(grid == null ||grid.length == 0)
        return 0;
        int numofIslands =0;
        int nr = grid.length;
        int nc = grid[0].length;
     
      for(int i=0;i<nr;i++)
        for(int j=0;j<nc;j++)
        {
         
          if(grid[i][j]-'0'==1)
          {
            numofIslands++;
            dfs(grid,i,j);
          }
        }
      return numofIslands;
    }
  public static void dfs(char[][] grid,int r,int c)
  {
    int nr=grid.length;
    int nc = grid[0].length;
    if(r<0||c<0||r >= nr||c>=nc||grid[r][c]=='0')
      return;
    grid[r][c]='0';
    dfs(grid,r+1,c);
    dfs(grid,r-1,c);
    dfs(grid,r,c+1);
    dfs(grid,r,c-1);
  }
    /*Time complexity is O(M*N)
    Space complexity is O(min(M,N)) as at any point that will be the max index present in the queue.
    */
  public static int numIslands(char[][] grid)
  {
    if(grid == null || grid.length == 0)
      return 0;
        int nr = grid.length;
        int nc = grid[0].length;
        int numofIslands=0;
    
    for(int r=0;r<nr;r++)
      for(int c=0;c<nc;c++)
      {
        if(grid[r][c]=='1')
        {
          numofIslands++;
          grid[r][c]='0';
          Deque<Integer> nodeIndex = new ArrayDeque<Integer>();
          int index = r*nc+c;
          nodeIndex.add(index);
          while(!nodeIndex.isEmpty())
          {
            int ind = nodeIndex.pop();
            int row = ind/nc;
            int col = ind%nc;
            if(row-1 >=0 && grid[row-1][col]=='1')
            {
              grid[row-1][col]='0';
              nodeIndex.add((row-1)*nc+col);
            }
            if(row+1 <nr && grid[row+1][col]=='1')
            {
              grid[row+1][col]='0';
              nodeIndex.add((row+1)*nc+col);
            }
            if(col -1 >=0 && grid[row][col-1] == '1')
            {
              grid[row][col-1] = '0';
              nodeIndex.add(row*nc+col-1);
            }
            if(col+1<nc && grid[row][col+1]== '1')
            {
              grid[row][col+1]= '0';
              nodeIndex.add(row*nc+col+1);
            }
          }
        }
      }
    return numofIslands;
  }
}
