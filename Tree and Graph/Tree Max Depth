/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 Time COmplexity is O(N)
 Space complexity is O(N) in worst case of unbalanced tree, O(LogN) in case of balanced tree
 */
class Solution {
    public int maxDepth(TreeNode root) {
         int depth=0;
        return DFS(root,depth);
        
    }
      public static int DFS(TreeNode node,int depth)
  {
          System.out.println(depth);
    if (node == null)
      return depth;
    else {
       
      int leftDepth = DFS(node.left,depth+1);
      int rightDepth =DFS(node.right,depth+1);
      return Math.max(leftDepth,rightDepth);
      
    }
  }
}
