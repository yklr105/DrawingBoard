/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
      public List<String> binaryTreePaths1(TreeNode root) {
        List<String> paths = new ArrayList<String>();
        
        this.buildBinaryTreePath(root,"",paths); 
        return paths;
    }
  /*
  Time complexity is O(N), where N is the number of nodes and each node is visited once
  Space complexity is for call stack which is O(N)  , The list paths will have as many elements as the leaf nodes which in case of balanced tree is O(log n)In case every node has just one child it will be O(N)
  */
 public void buildBinaryTreePath(TreeNode node,String path,List<String> paths)
 {
     System.out.println("Reccur");
   if(node == null)
     return;
   path = path+String.valueOf(node.val);
   if(node.left== null && node.right == null)
   {
     paths.add(path);
     return;
   }
   if(node.left !=null)
   {
     buildBinaryTreePath(node.left,path+"->",paths);
   }
   if(node.right != null)
   {
     buildBinaryTreePath(node.right,path+"->",paths);
   }
     
 }
public List<String> binaryTreePaths(TreeNode root) {
        List<String> paths = new ArrayList<String>();
        
        
        return paths;
    }
    
}
