/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> returnList = new ArrayList<Integer>();
        if(root == null)
            return returnList;
        Deque<TreeNode> nodeStack = new ArrayDeque<TreeNode>();
        
        
        nodeStack.push(root);
        TreeNode curr = new TreeNode();
        while(!nodeStack.isEmpty())
        {
            curr=nodeStack.pop();
            returnList.add(curr.val);
            if(null != curr.right)
                nodeStack.push(curr.right);
            if(null != curr.left)
                nodeStack.push(curr.left);
        }
        return returnList;
        
    }
}
