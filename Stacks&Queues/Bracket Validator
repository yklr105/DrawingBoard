class Solution {
    public boolean isValid(String s) {
       Stack <Character> bracketStack = new Stack <Character>();
    char [] charArray = s.toCharArray();
      for(int i=charArray.length-1;i>=0;i--)
      {
        if(isClosingBracket(charArray[i]))
        {
          bracketStack.push(charArray[i]);
        }
        else
        {
          if(bracketStack.isEmpty() || !isMatchingBrackets(charArray[i],bracketStack.pop()))
          {
            return false;
          }
        }
        
      }
      if(bracketStack.isEmpty()) return true;
      else return false;
    }
    private static boolean isClosingBracket(char bracketToChk)
  {
    List<Character> closingBrackets = Arrays.asList('}',']',')');
    return closingBrackets.contains(bracketToChk);
  }

  private static boolean isMatchingBrackets(char brack1,char brack2)
  {
    List<String> matchingBrackets = Arrays.asList("{}","[]","()");
    String bracketPair = new StringBuilder().append(brack1).append(brack2).toString();
    return matchingBrackets.contains(bracketPair);
    
  }
}
